"use client";

import Head from "next/head";
import { useEffect } from "react";
import { useFieldArray, useForm } from "react-hook-form";
import { z } from "zod";
import { create } from "zustand";
import { persist, createJSONStorage } from "zustand/middleware";
import {
  Table,
  TableBody,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "~/components/ui/table";
import { useToast } from "~/components/ui/use-toast";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "~/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormMessage,
} from "~/components/ui/form";
import { Input } from "~/components/ui/input";

const PersonSchema = z.object({
  id: z.number(),
  firstname: z.string().min(2, "Firstname must contain at least 2 characters"),
  lastname: z.string().min(2, "Lastname must contain at least 2 characters"),
  nickname: z
    .union([
      z.string().min(2, "Lastname must contain at least 2 characters"),
      z.literal(""),
    ])
    .optional(),
});

type TPersonSchema = z.infer<typeof PersonSchema>;

const PeopleFormSchema = z.object({
  people: z.array(PersonSchema),
});

type TPeopleFormSchema = z.infer<typeof PeopleFormSchema>;

interface ListStoreState {
  list: TPersonSchema[];
  setList: (list: TPersonSchema[]) => void;
  hasHydrated: boolean;
  setHasHydrated: (hasHydrated: boolean) => void;
}

export const useListStore = create<ListStoreState>()(
  persist(
    (set) => ({
      list: [],
      setList: (list: TPersonSchema[]) => set(() => ({ list: list })),
      hasHydrated: false,
      setHasHydrated: (state) => {
        set({
          hasHydrated: state,
        });
      },
    }),
    {
      name: "list-storage",
      storage: createJSONStorage(() => localStorage),
      onRehydrateStorage: () => (state) => {
        if (state == null) return;
        state.setHasHydrated(true);
      },
    },
  ),
);

export default function Home() {
  const { list, setList } = useListStore();
  const { toast } = useToast();

  const form = useForm<TPeopleFormSchema>({
    resolver: zodResolver(PeopleFormSchema),
    defaultValues: {
      people: [] as TPersonSchema[],
    },
  });

  useEffect(() => {
    form.setValue("people", list ?? "");
  }, [form, list]);

  const { fields } = useFieldArray({ name: "people", control: form.control });

  const onSubmit = (data: TPeopleFormSchema) => {
    console.log(data);
    setList(data.people);
    toast({
      title: "Saved!",
    });
  };

  const addPerson = () => {
    const formList = form.getValues();
    const highestId = formList.people.reduce(
      (max, item) => (item.id > max ? item.id : max),
      formList?.people[0]?.id ?? 0,
    );
    const person: TPersonSchema = {
      id: highestId + 1,
      firstname: "",
      lastname: "",
      nickname: "",
    };

    form.setValue("people", [...formList.people, person]);
  };

  return (
    <>
      <Head>
        <title>react-table-list-hook-form</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-start bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-start justify-center gap-12 px-4 py-10">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            react-table-list-hook-
            <span className="text-[hsl(280,100%,70%)]">form</span>
            <p className="text-lg font-extralight tracking-normal">
              This form includes a list created using a custom type, supported
              by the following packages: react-hook-form, zod, shadcn/ui, and
              zustand for state management and data persistence to local
              storage.
            </p>
          </h1>
          <div className="text-white">
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)}>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Firstname</TableHead>
                      <TableHead>Lastname</TableHead>
                      <TableHead>Nickname</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {fields.map((field, index) => (
                      <TableRow key={field.id}>
                        <TableCell className="font-medium">
                          <FormField
                            control={form.control}
                            key={field.id}
                            name={`people.${index}.firstname`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input
                                    key={field.id}
                                    {...form.register(
                                      `people.${index}.firstname`,
                                    )}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                        <TableCell>
                          <FormField
                            control={form.control}
                            key={field.id}
                            name={`people.${index}.lastname`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input
                                    key={field.id}
                                    {...form.register(
                                      `people.${index}.lastname`,
                                    )}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                        <TableCell>
                          <FormField
                            control={form.control}
                            key={field.id}
                            name={`people.${index}.nickname`}
                            render={({ field }) => (
                              <FormItem>
                                <FormControl>
                                  <Input
                                    key={field.id}
                                    {...form.register(
                                      `people.${index}.nickname`,
                                    )}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                  <TableFooter className="bg-transparent hover:bg-transparent">
                    <TableRow className="hover:bg-transparent">
                      <TableCell colSpan={3}>
                        <Button className="w-full" onClick={() => addPerson()}>
                          Add Person
                        </Button>
                      </TableCell>
                    </TableRow>
                  </TableFooter>
                </Table>
                <div className="py-3">
                  <Button type="submit">Save</Button>
                </div>
              </form>
            </Form>
          </div>
        </div>
      </main>
    </>
  );
}
